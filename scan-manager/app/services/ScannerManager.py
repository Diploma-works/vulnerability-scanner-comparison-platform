from typing import Optional, List, Union, Dict

from app.clients.catalog_service.models.scanner import Scanner, VolumeDB
from common.DockerProvider import DockerProvider


class ScannerManager:

    def __init__(
            self,
            docker_provider: DockerProvider,
    ):
        self.__docker_provider = docker_provider

    async def start(self) -> None:
        await self.__docker_provider.connect()

    async def stop(self) -> None:
        await self.__docker_provider.disconnect()

    @staticmethod
    def __convert_scanner_volumes(old_volumes: Union[VolumeDB, List[VolumeDB]]) -> Dict[str, Dict]:
        new_volumes = dict()
        if isinstance(old_volumes, list):
            for volume in old_volumes:
                new_volumes.update(
                    {volume.user_path: {'bind': volume.docker_path,
                                        'mode': volume.mode if volume.mode is not None else 'rw'}
                     }
                )
        else:
            new_volumes.update(
                {old_volumes.user_path: {'bind': old_volumes.docker_path,
                                         'mode': old_volumes.mode if old_volumes.mode is not None else 'rw'}
                 }
            )
        return new_volumes

    @staticmethod
    def __create_container_name(scanner: Scanner, scan_id: int) -> str:
        return f"{scanner.name}-{scanner.version}-{scan_id}"

    async def start_scan(self, scanner: Scanner, target_url: str, scan_id: int, options: Optional[dict]) -> Optional[str]:
        print(f"{scanner.base_command} " f"{target_url} " + " ".join([f"{k} {v}" for k, v in options.items()]))
        try:
            container = await self.__docker_provider.start_container(
                name=self.__create_container_name(scanner, scan_id),
                image_name=scanner.docker_image_name,
                command=f"{scanner.base_command} " f"{target_url} " + " ".join([f"{k} {v}" for k, v in options.items()]),
                volumes=self.__convert_scanner_volumes(scanner.volumes),
                env_variables=scanner.env_variables
            )
            return container.id
        except ConnectionError as cont_error:
            return None
