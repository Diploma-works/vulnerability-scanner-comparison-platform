from datetime import datetime
from typing import Optional, Dict

from fastapi import HTTPException
from starlette import status

from app.clients.catalog_service import CatalogServiceClient
from app.models.common import Id
from app.models.errors import TARGET_NOT_FOUND, SCAN_ERROR
from app.models.scan import ScanList
from app.services import ScannerManager
from common.ScanContainerInfoRepository import ScanContainerInfoRepository
from common.ScanRepository import ScanRepository
from common.enums import ScanStatus


class ScanService:
    def __init__(
            self,
            scan_repository: ScanRepository,
            scan_cont_info_repository: ScanContainerInfoRepository,
            scanner_manager: ScannerManager,
            catalog_service_client: CatalogServiceClient
    ):
        self.__scan_repository = scan_repository
        self.__scan_cont_info_repository = scan_cont_info_repository
        self.__scanner_manager = scanner_manager
        self.__catalog_service_client = catalog_service_client

    async def __add_report_name_to_scan_options(self, scanner_id: int, report_type: str, scan_id: int,
                                                options: Optional[Dict]) -> (Dict, str):
        report_option = (await self.__catalog_service_client.get_report_options(scanner_id, report_type)).report_option
        report_name = f"{scan_id}.{report_type}"
        if options is not None:
            options.update({report_option: report_name})
        else:
            options = {report_option: report_name}
        return options, report_name

    async def get_scans(
            self,
    ) -> ScanList:
        return ScanList(scans=await self.__scan_repository.get_scans())

    async def start_scan(
            self,
            target_id: int,
            scanner_id: int,
            report_type: str,
            options: Optional[Dict],
    ) -> Id:
        target = (await self.__catalog_service_client.get_target_by_id(target_id)).targets

        if not target:
            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=TARGET_NOT_FOUND)

        scanner = await self.__catalog_service_client.get_scanner_by_id(scanner_id)
        scan_id = await self.__scan_repository.insert_scan(target_id, scanner_id, datetime.now(), None,
                                                           ScanStatus.STARTED, None)

        options, report_name = await self.__add_report_name_to_scan_options(scanner_id, report_type, scan_id, options)
        container_id = await self.__scanner_manager.start_scan(
            scanner=scanner,
            target_url=target.url,
            scan_id=scan_id,
            options=options
        )
        if not container_id:
            await self.__scan_repository.set_scan_status(scan_id, ScanStatus.ATTACK_ERROR)
            raise HTTPException(status_code=500, detail=SCAN_ERROR)
        else:
            await self.__scan_repository.set_scan_status(scan_id, ScanStatus.IN_PROGRESS)
            await self.__scan_cont_info_repository.insert_scan_container_info(scan_id, container_id, scanner.exit_code)
            await self.__scan_repository.set_scan_report_path(scan_id, f"{scanner.name}/{scanner.version}/{report_name}")
        return Id(id=scan_id)
