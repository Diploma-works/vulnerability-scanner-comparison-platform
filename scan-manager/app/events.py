from typing import Callable

from fastapi import FastAPI
from loguru import logger

from app.clients.catalog_service import create_client as create_catalog_client
from app.clients.catalog_service import stop_client as stop_catalog_client
from app.config import Config
from app.db.events import close_db_connection
from app.db.events import connect_to_db
from app.services.ScannerManager import ScannerManager
from common.DockerProvider import DockerProvider


def create_start_app_db_event(app: FastAPI, config: Config) -> Callable:
    @logger.catch
    async def start_app() -> None:
        await connect_to_db(app, config)

    return start_app


def create_stop_app_db_event(app: FastAPI) -> Callable:
    @logger.catch
    async def stop_app() -> None:
        await close_db_connection(app)

    return stop_app


def create_start_scanner_manager(app: FastAPI):
    @logger.catch
    async def start_app() -> None:
        app.state.scanner_manager = ScannerManager(docker_provider=DockerProvider())
        await app.state.scanner_manager.start()

    return start_app


def create_stop_scanner_manager(app: FastAPI):
    @logger.catch
    async def start_app() -> None:
        await app.state.scanner_manager.stop()

    return start_app


def create_start_catalog_service_client(app: FastAPI, config: Config) -> Callable:
    @logger.catch
    def start_app() -> None:
        create_catalog_client(app, config.external_services.catalog_service.base_url)

    return start_app


def create_stop_catalog_service_client(app: FastAPI) -> Callable:
    @logger.catch
    async def stop_app() -> None:
        await stop_catalog_client(app)

    return stop_app
