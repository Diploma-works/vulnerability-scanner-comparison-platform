from typing import Any, Type, Optional

from aiohttp import ClientSession
from pydantic import BaseModel


class BaseHttpClient:
    def __init__(
            self,
            base_url: str
    ):
        self.base_url = base_url
        self.session = ClientSession()

    @staticmethod
    def __serialize_response_object(content, serializer: Type[BaseModel] = BaseModel) -> BaseModel:
        return serializer.construct(**dict(content.items()))

    async def do_get(self, request_path: str, headers: Optional[dict] = None, params: Optional[dict] = None,
                     ) -> Any:
        print(self.base_url + request_path)
        async with self.session.get(self.base_url + request_path, headers=headers, params=params) as response:
            print(response.status)
            return await response.json()

    async def do_post(self, request_path: str, headers: dict, params: dict, body: dict) -> Any:
        async with self.session.post(self.base_url + request_path, headers=headers, params=params,
                                     json=body) as response:
            print(response.status)

    async def do_put(self, request_path: str, headers: dict, params: dict, body: dict) -> Any:
        async with self.session.put(self.base_url + request_path, headers=headers, params=params,
                                    json=body) as response:
            print(response.status)
