from app.clients.BaseHttpClient import BaseHttpClient
from app.clients.catalog_service.models.scanner import ScannerList, Scanner, ReportOption, VolumeDB
from app.clients.catalog_service.models.target import TargetList, Target


class CatalogServiceClient(BaseHttpClient):
    def __init__(self, base_url: str):
        super().__init__(base_url)

    async def get_target_by_id(self, target_id: int) -> Target:
        response = await self.do_get(f"/target/{target_id}")
        return Target.construct(**dict(response.items()))

    async def get_scanners(self) -> ScannerList:
        response = await self.do_get("/scanner/")
        return ScannerList(scanners=list(map(lambda x: Scanner.construct(**dict(x.items())), response.get('scanners'))))

    async def get_scanner_by_id(self, scanner_id: int) -> Scanner:
        response = await self.do_get(f"/scanner/{scanner_id}")
        volumes = response.get('volumes')
        if isinstance(volumes, list):
            volumes = [VolumeDB.construct(**dict(v)) for v in volumes]
        else:
            volumes = VolumeDB.construct(**dict(volumes))
        scanner = Scanner.construct(**dict(response.items()))
        scanner.volumes = volumes
        return scanner

    async def get_report_options(
            self,
            scanner_id: int, report_type: str
    ) -> ReportOption:
        response = await self.do_get(f"/scanner/{scanner_id}/report_option", params={"report_type": report_type})
        return ReportOption.construct(**dict(response.items()))
