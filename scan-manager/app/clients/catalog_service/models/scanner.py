from typing import Optional, List, Dict, Union

from pydantic import BaseModel


class ScannerDB(BaseModel):
    id: int
    name: str
    version: str
    description: Optional[str]
    image_path: Optional[str]
    docker_image_name: str
    base_command: str
    volumes_ids: str
    env_variables: Optional[str]
    exit_code: int

    @property
    def volumes_ids_as_array(self) -> List[int]:
        return list(map(int, self.volumes_ids.split(',')))


class Volume(BaseModel):
    user_path: str
    docker_path: str
    mode: Optional[str]


class VolumeDB(BaseModel):
    id: int
    user_path: str
    docker_path: str
    mode: Optional[str]


class VolumeList(BaseModel):
    volumes: List[VolumeDB]


class Scanner(BaseModel):
    id: int
    name: str
    version: str
    description: Optional[str]
    image_path: Optional[str]
    docker_image_name: str
    base_command: str
    volumes: Union[VolumeDB, List[VolumeDB]]
    env_variables: Optional[str]
    exit_code: int


class ScannerList(BaseModel):
    scanners: List[Scanner]


class UpsertScannerRequest(BaseModel):
    name: str
    version: str
    description: Optional[str]
    image_path: Optional[str]
    docker_image_name: str
    base_command: str
    volumes: Union[Volume, List[Volume]]
    env_variables: Optional[str]
    report_options: Dict[str, str]


class ReportOption(BaseModel):
    id: int
    scanner_id: int
    report_type: str
    report_option: str


class ReportOptionList(BaseModel):
    options: List[ReportOption]
