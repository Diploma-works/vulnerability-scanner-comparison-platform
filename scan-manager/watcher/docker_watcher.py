import asyncio

from loguru import logger

from common.DockerProvider import DockerProvider
from common.RabbitMQClient import RabbitMQClient
from common.utils import get_postgres_url, get_rabbit_url
from watcher.PostgresDB import PostgresDB
from watcher.docker_events_handler import DockerEventsHandler

postgres = PostgresDB()
docker_manager = DockerProvider()
rabbitmq = RabbitMQClient()


async def main() -> None:
    await asyncio.gather(postgres.connect(get_postgres_url()), docker_manager.connect(),
                         rabbitmq.connect(get_rabbit_url()))
    docker_events_handler = DockerEventsHandler(docker_manager, postgres, rabbitmq)
    while True:
        await asyncio.gather(docker_events_handler.update_scans_statuses())
        await asyncio.sleep(10)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(str(e))
        raise
    finally:
        asyncio.gather(postgres.disconnect(), docker_manager.disconnect(), rabbitmq.disconnect())
