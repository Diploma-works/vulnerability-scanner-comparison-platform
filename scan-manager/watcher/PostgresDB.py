from typing import Optional

from asyncpg import Pool, create_pool
from loguru import logger

from common.ScanContainerInfoRepository import ScanContainerInfoRepository
from common.ScanRepository import ScanRepository


class PostgresDB:
    __pool: Optional[Pool] = None
    __url: Optional[str] = None
    __scan_container_info: Optional[ScanContainerInfoRepository] = None
    __scan: Optional[ScanRepository] = None

    async def connect(self, url: Optional[str]) -> None:
        if self.__url is None:
            self.__url = url
        try:
            self.__pool = await create_pool(dsn=url)
            logger.debug('Connected to PostgresDB')
        except Exception as e:
            raise RuntimeError(e)

    async def disconnect(self) -> None:
        if self.__pool is not None:
            await self.__pool.close()
            self.__pool = None
            logger.debug('Connection to PostgresDB closed')

    @property
    def scan_container_info(self) -> ScanContainerInfoRepository:
        if self.__scan_container_info is None:
            self.__scan_container_info = ScanContainerInfoRepository(self.__pool)
            logger.debug('Access to ScanContainerInfo table has provided')
        return self.__scan_container_info

    @property
    def scan(self) -> ScanRepository:
        if self.__scan is None:
            self.__scan = ScanRepository(self.__pool)
            logger.debug('Access to Scan table has provided')
        return self.__scan
