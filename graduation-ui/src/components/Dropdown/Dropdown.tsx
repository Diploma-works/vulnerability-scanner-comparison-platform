import React, {useEffect, useState} from 'react';
import classNames from "classnames";
import {DropdownItem, emptyDropdownItem} from "../../utils/DropdownItem";
import ClickAwayListener from "react-click-away-listener";
import "./Dropdown.css"
import {useSearchParams} from "react-router-dom";
import {observer} from "mobx-react-lite";

export interface DropdownProps {
  items: DropdownItem[],
  defaultItem?: DropdownItem,
  onItemSelectFunction?: Function
}

const Dropdown = (props: DropdownProps) => {

  const [selectedItem, setSelectedItem] = useState<DropdownItem>(emptyDropdownItem)
  const [isActive, setIsActive] = useState<boolean>(false)

  const [searchParams, setSearchParams] = useSearchParams()

  useEffect(() => {
    if (props.defaultItem !== undefined) {
      setSelectedItem(props.defaultItem)
    }
  }, []);

  const Trigger = () => {
    return (
      <div className="dropdown-trigger full-width">
        <button
          className="button"
          aria-haspopup="true"
          aria-controls="dropdown-menu"
          onClick={() => setIsActive(true)}
        >
          <span>{selectedItem.value}</span>
          <span className="icon is-small">
            <i className="fa fa-angle-down" aria-hidden="true"/>
          </span>
        </button>
      </div>
    )
  }

  const Menu = () => {
    return (
      <div className="dropdown-menu" role="menu">
        <div className="dropdown-content with-scroll">
          {props.items.map((item) => (
            <div
              className={classNames("dropdown-item", "is-clickable", {
                "is-selected": selectedItem.id === item.id && selectedItem.id !== -1
              })}
              onClick={() => {
                setSelectedItem(item)
                if (props.onItemSelectFunction !== undefined) {
                  props.onItemSelectFunction(item)
                }
                setIsActive(false)
              }}
            >
              <span>{item.value}</span>
              {/*<span className="icon is-small is-pulled-right">*/}
              {/*    <i*/}
              {/*      className={selectedItem.id === item.id && selectedItem.id !== -1 ? "fa fa-check" : ""}*/}
              {/*      aria-hidden="true"*/}
              {/*    ></i>*/}
              {/*  </span>*/}
            </div>
          ))}
        </div>
      </div>
    )
  }

  return (
    <ClickAwayListener onClickAway={() => setIsActive(false)}>
      <div className={classNames("dropdown", "full-width", {
        "is-active": isActive
      })}>
        {Trigger()}
        {Menu()}
      </div>
    </ClickAwayListener>
  );
};

export default Dropdown;