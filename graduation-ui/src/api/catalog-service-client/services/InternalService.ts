/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ReportOption } from '../models/ReportOption';
import type { ReportOptionList } from '../models/ReportOptionList';
import type { Scanner } from '../models/Scanner';
import type { ScannerList } from '../models/ScannerList';
import type { TargetList } from '../models/TargetList';
import type { VulnerabilityGroupsList } from '../models/VulnerabilityGroupsList';
import type { VulnerabilityTypesList } from '../models/VulnerabilityTypesList';
import type { CancelablePromise } from '../core/CancelablePromise';
import type { BaseHttpRequest } from '../core/BaseHttpRequest';
export class InternalService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}
    /**
     * Get User Targets
     * Получение целей пользователя
     * @returns TargetList Successful Response
     * @throws ApiError
     */
    public getUserTargets(): CancelablePromise<TargetList> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/target/',
        });
    }
    /**
     * Get Scanners
     * Получение списка сканеров
     * @returns ScannerList Successful Response
     * @throws ApiError
     */
    public getScanners(): CancelablePromise<ScannerList> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/scanner/',
        });
    }
    /**
     * Get Scanner By Id
     * Получение сканера по id
     * @param scannerId
     * @returns Scanner Successful Response
     * @throws ApiError
     */
    public getScannerById(
        scannerId: number,
    ): CancelablePromise<Scanner> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/scanner/{scanner_id}',
            path: {
                'scanner_id': scannerId,
            },
            errors: {
                422: `Validation Error`,
            },
        });
    }
    /**
     * Get Scanner Report Options
     * Получение списка опций запуска сканера для генерации отчета
     * @param scannerId
     * @param reportType
     * @returns any Successful Response
     * @throws ApiError
     */
    public getScannerReportOptions(
        scannerId: number,
        reportType?: (string | null),
    ): CancelablePromise<(ReportOption | ReportOptionList)> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/scanner/{scanner_id}/report_option',
            path: {
                'scanner_id': scannerId,
            },
            query: {
                'report_type': reportType,
            },
            errors: {
                422: `Validation Error`,
            },
        });
    }
    /**
     * Get Vulnerabilities
     * Получение списка найденных уязвимостей
     * @returns VulnerabilityTypesList Successful Response
     * @throws ApiError
     */
    public getVulnerabilities(): CancelablePromise<VulnerabilityTypesList> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/vulnerability/list',
        });
    }
    /**
     * Get Vulnerability Groups
     * Получение списка групп уязвимостей
     * @returns VulnerabilityGroupsList Successful Response
     * @throws ApiError
     */
    public getVulnerabilityGroups(): CancelablePromise<VulnerabilityGroupsList> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/vulnerability/groups',
        });
    }
}
