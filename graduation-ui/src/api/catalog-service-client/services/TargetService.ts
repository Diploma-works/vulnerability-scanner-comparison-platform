/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { Id } from '../models/Id';
import type { Target } from '../models/Target';
import type { TargetList } from '../models/TargetList';
import type { UpsertTargetRequest } from '../models/UpsertTargetRequest';
import type { CancelablePromise } from '../core/CancelablePromise';
import type { BaseHttpRequest } from '../core/BaseHttpRequest';
export class TargetService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}
    /**
     * Get Targets
     * Получение списка целей
     * @returns TargetList Successful Response
     * @throws ApiError
     */
    public getTargets(): CancelablePromise<TargetList> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/target/',
        });
    }
    /**
     * Create Target
     * Добавление новой цели
     * @param requestBody
     * @returns Id Successful Response
     * @throws ApiError
     */
    public createTarget(
        requestBody: UpsertTargetRequest,
    ): CancelablePromise<Id> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/target/',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                422: `Validation Error`,
            },
        });
    }
    /**
     * Get Target By Id
     * Получение цели по id
     * @param targetId
     * @returns Target Successful Response
     * @throws ApiError
     */
    public getTargetById(
        targetId: number,
    ): CancelablePromise<Target> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/target/{target_id}',
            path: {
                'target_id': targetId,
            },
            errors: {
                422: `Validation Error`,
            },
        });
    }
    /**
     * Update Target
     * Обновление информации о цели
     * @param targetId
     * @param requestBody
     * @returns any Successful Response
     * @throws ApiError
     */
    public updateTarget(
        targetId: number,
        requestBody: UpsertTargetRequest,
    ): CancelablePromise<any> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/target/{target_id}',
            path: {
                'target_id': targetId,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                422: `Validation Error`,
            },
        });
    }
    /**
     * Delete Target
     * Удаление цели
     * @param targetId
     * @returns any Successful Response
     * @throws ApiError
     */
    public deleteTarget(
        targetId: number,
    ): CancelablePromise<any> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/target/{target_id}',
            path: {
                'target_id': targetId,
            },
            errors: {
                422: `Validation Error`,
            },
        });
    }
    /**
     * Get User Targets
     * Получение целей пользователя
     * @returns TargetList Successful Response
     * @throws ApiError
     */
    public getUserTargets(): CancelablePromise<TargetList> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/target/',
        });
    }
}
