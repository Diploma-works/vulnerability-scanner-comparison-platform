/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { Id } from '../models/Id';
import type { ReportOptionList } from '../models/ReportOptionList';
import type { Scanner } from '../models/Scanner';
import type { ScannerList } from '../models/ScannerList';
import type { Target } from '../models/Target';
import type { TargetList } from '../models/TargetList';
import type { UpsertScannerRequest } from '../models/UpsertScannerRequest';
import type { UpsertTargetRequest } from '../models/UpsertTargetRequest';
import type { VulnerabilityGroupsList } from '../models/VulnerabilityGroupsList';
import type { VulnerabilityTypesList } from '../models/VulnerabilityTypesList';
import type { CancelablePromise } from '../core/CancelablePromise';
import type { BaseHttpRequest } from '../core/BaseHttpRequest';
export class ExternalService {
    constructor(public readonly httpRequest: BaseHttpRequest) {}
    /**
     * Get Available Migrations
     * Возвращает список доступных миграций для применения
     * @returns any Successful Response
     * @throws ApiError
     */
    public getAvailableMigrations(): CancelablePromise<any> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/system/migrations',
        });
    }
    /**
     * Apply Available Migrations
     * Применяет доступные миграции
     * @returns any Successful Response
     * @throws ApiError
     */
    public applyAvailableMigrations(): CancelablePromise<any> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/system/migrations/apply',
        });
    }
    /**
     * Get Scanners
     * Получение списка сканеров
     * @returns ScannerList Successful Response
     * @throws ApiError
     */
    public getScanners(): CancelablePromise<ScannerList> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/scanner/list',
        });
    }
    /**
     * Get Scanner By Id
     * Метод получения сканера по id
     * @param scannerId
     * @returns Scanner Successful Response
     * @throws ApiError
     */
    public getScannerById(
        scannerId: number,
    ): CancelablePromise<Scanner> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/scanner/{scanner_id}',
            path: {
                'scanner_id': scannerId,
            },
            errors: {
                422: `Validation Error`,
            },
        });
    }
    /**
     * Update Scanner
     * Метод обновления информации о сканере
     * @param scannerId
     * @param requestBody
     * @returns any Successful Response
     * @throws ApiError
     */
    public updateScanner(
        scannerId: number,
        requestBody: UpsertScannerRequest,
    ): CancelablePromise<any> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/scanner/{scanner_id}',
            path: {
                'scanner_id': scannerId,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                422: `Validation Error`,
            },
        });
    }
    /**
     * Create Scanner
     * Метод добавления сканера
     * @param requestBody
     * @returns Id Successful Response
     * @throws ApiError
     */
    public createScanner(
        requestBody: UpsertScannerRequest,
    ): CancelablePromise<Id> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/scanner/',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                422: `Validation Error`,
            },
        });
    }
    /**
     * Get Scanner Report Options
     * Получение списка опций запуска сканера для генерации отчета
     * @param scannerId
     * @returns ReportOptionList Successful Response
     * @throws ApiError
     */
    public getScannerReportOptions(
        scannerId: number,
    ): CancelablePromise<ReportOptionList> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/scanner/{scanner_id}/report_option',
            path: {
                'scanner_id': scannerId,
            },
            errors: {
                422: `Validation Error`,
            },
        });
    }
    /**
     * Get Targets
     * Получение списка целей
     * @returns TargetList Successful Response
     * @throws ApiError
     */
    public getTargets(): CancelablePromise<TargetList> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/target/',
        });
    }
    /**
     * Create Target
     * Добавление новой цели
     * @param requestBody
     * @returns Id Successful Response
     * @throws ApiError
     */
    public createTarget(
        requestBody: UpsertTargetRequest,
    ): CancelablePromise<Id> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/target/',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                422: `Validation Error`,
            },
        });
    }
    /**
     * Get Target By Id
     * Получение цели по id
     * @param targetId
     * @returns Target Successful Response
     * @throws ApiError
     */
    public getTargetById(
        targetId: number,
    ): CancelablePromise<Target> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/target/{target_id}',
            path: {
                'target_id': targetId,
            },
            errors: {
                422: `Validation Error`,
            },
        });
    }
    /**
     * Update Target
     * Обновление информации о цели
     * @param targetId
     * @param requestBody
     * @returns any Successful Response
     * @throws ApiError
     */
    public updateTarget(
        targetId: number,
        requestBody: UpsertTargetRequest,
    ): CancelablePromise<any> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/target/{target_id}',
            path: {
                'target_id': targetId,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                422: `Validation Error`,
            },
        });
    }
    /**
     * Delete Target
     * Удаление цели
     * @param targetId
     * @returns any Successful Response
     * @throws ApiError
     */
    public deleteTarget(
        targetId: number,
    ): CancelablePromise<any> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/target/{target_id}',
            path: {
                'target_id': targetId,
            },
            errors: {
                422: `Validation Error`,
            },
        });
    }
    /**
     * Get Vulnerabilities
     * Получение списка найденных уязвимостей
     * @returns VulnerabilityTypesList Successful Response
     * @throws ApiError
     */
    public getVulnerabilities(): CancelablePromise<VulnerabilityTypesList> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/vulnerability/list',
        });
    }
    /**
     * Get Vulnerability Groups
     * Получение списка групп уязвимостей
     * @returns VulnerabilityGroupsList Successful Response
     * @throws ApiError
     */
    public getVulnerabilityGroups(): CancelablePromise<VulnerabilityGroupsList> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/vulnerability/groups',
        });
    }
}
