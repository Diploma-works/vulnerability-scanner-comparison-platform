/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { OpenAPIConfig } from './core/OpenAPI';
import { FetchHttpRequest } from './core/FetchHttpRequest';
import { ExternalService } from './services/ExternalService';
import { InternalService } from './services/InternalService';
import { ScannerService } from './services/ScannerService';
import { SystemService } from './services/SystemService';
import { TargetService } from './services/TargetService';
import { VulnerabilityService } from './services/VulnerabilityService';
type HttpRequestConstructor = new (config: OpenAPIConfig) => BaseHttpRequest;
export class CatalogServiceClient {
    public readonly external: ExternalService;
    public readonly internal: InternalService;
    public readonly scanner: ScannerService;
    public readonly system: SystemService;
    public readonly target: TargetService;
    public readonly vulnerability: VulnerabilityService;
    public readonly request: BaseHttpRequest;
    constructor(config?: Partial<OpenAPIConfig>, HttpRequest: HttpRequestConstructor = FetchHttpRequest) {
        this.request = new HttpRequest({
            BASE: config?.BASE ?? '',
            VERSION: config?.VERSION ?? '0.1.0',
            WITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,
            CREDENTIALS: config?.CREDENTIALS ?? 'include',
            TOKEN: config?.TOKEN,
            USERNAME: config?.USERNAME,
            PASSWORD: config?.PASSWORD,
            HEADERS: config?.HEADERS,
            ENCODE_PATH: config?.ENCODE_PATH,
        });
        this.external = new ExternalService(this.request);
        this.internal = new InternalService(this.request);
        this.scanner = new ScannerService(this.request);
        this.system = new SystemService(this.request);
        this.target = new TargetService(this.request);
        this.vulnerability = new VulnerabilityService(this.request);
    }
}

