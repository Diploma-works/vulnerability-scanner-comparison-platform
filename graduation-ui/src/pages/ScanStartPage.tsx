import React, {useEffect, useState} from 'react';
import {ReportOption, Scanner, Target} from "../api/catalog-service-client";
import clientFacade from "../api/ClientFacade";
import {useNavigate, useParams, useSearchParams} from "react-router-dom";
import Dropdown from "../components/Dropdown/Dropdown";
import {Converter} from "../utils/Converter";
import {DropdownItem} from "../utils/DropdownItem";
import {observer} from "mobx-react-lite";

const ScanStartPage = () => {
  const {targetId, scannerId} = useParams()
  const [searchParams, setSearchParams] = useSearchParams()
  const navigate = useNavigate()

  const [scanners, setScanners] = useState<Scanner[]>([])
  const [targets, setTargets] = useState<Target[]>([])

  const [chosenReportOption, setChosenReportOption] = useState<ReportOption>()
  const [scanOptions, setScanOptions] = useState<string>("")
  const [isStartButtonActive, setIsStartButtonActive] = useState<boolean>(false)

  useEffect(() => {
    clientFacade.catalogServiceClient.external.getScanners()
      .then((response) => {
        setScanners(response.scanners)
      })
      .catch((error) => {
        console.log(error.message)
      })
    clientFacade.catalogServiceClient.external.getTargets()
      .then((response) => {
        setTargets(response.targets)
      })
      .catch((error) => {
        console.log(error.message)
      })
  }, []);

  useEffect(() => {
    if (searchParams.get("target_id") !== null && searchParams.get("scanner_id") !== null &&
      searchParams.get("report_type") !== null
    ) {
      setIsStartButtonActive(true)
    }
  }, [searchParams]);

  function createScan() {
    clientFacade.scanManagerClient.scan.startScan({
      target_id: Number(searchParams.get("target_id")!),
      scanner_id: Number(searchParams.get("scanner_id")!),
      report_type: searchParams.get("report_type")!,
      options: null
    })
      .then((response) => {
        navigate("") //TODO Перевод на страницу скана
      })
      .catch((error) => {
        console.log(error.message)
      })
  }

  return (
    <div className="column is-half is-offset-one-quarter">
      <div className="box m-3 full-width">
        <div
          className="mb-2"
          title="URL цели"
        >
            <span className="icon is-big is-left">
                <i className="fa fa-bullseye" aria-hidden="true"></i>
            </span>
          <label className="ml-2">Цель</label>
        </div>
        <Dropdown
          items={[{id: 1, value: "dvwa"}]}
          onItemSelectFunction={(item: DropdownItem) => {
            searchParams.set("target_id", String(item.id))
            setSearchParams(searchParams)
          }}
        />
      </div>
      <div className="box m-3 columns">
        <div className="column is-half">
          <div className="mb-2">
              <span className="icon is-big is-left">
                  <i className="fa fa-bomb" aria-hidden="true"></i>
              </span>
            <label className="ml-2">Сканер</label>
          </div>
          <Dropdown
            items={Converter.convertScannersToDropdownItems(scanners)}
            onItemSelectFunction={(item: DropdownItem) => {
              searchParams.set("scanner_id", String(item.id))
              setSearchParams(searchParams)
            }}
          />
        </div>
        <div className="column is-half">
          <div className="mb-2">
              <span className="icon is-big is-left">
                  <i className="fa fa-file-archive-o" aria-hidden="true"></i>
              </span>
            <label className="ml-2">Тип отчета</label>
          </div>
          <Dropdown
            items={[{id: 1, value: "JSON"}]}
            onItemSelectFunction={(item: DropdownItem) => {
              searchParams.set("report_type", String(item.value))
              setSearchParams(searchParams)
            }}
          />
        </div>
      </div>
      <div className="box m-3">
        <div
          className="mb-2"
          title="Дополнительные опции для запуска контейнера сканирования"
        >
          <span className="icon is-big is-left">
              <i className="fa fa-cog" aria-hidden="true"></i>
          </span>
          <label className="ml-2">Дополнительные опции</label>
        </div>
        <input
          className="input"
          onChange={(event) => setScanOptions(event.target.value)}
        />
      </div>
      <div
        className="has-text-centered m-4"
      >
        <button
          className="button is-rounded"
          disabled={!isStartButtonActive}
          onClick={createScan}
        >
          Начать сканирование
        </button>
      </div>
    </div>
  );
};

export default observer(ScanStartPage);