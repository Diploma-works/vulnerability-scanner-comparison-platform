import React, {useEffect, useState} from 'react';
import ContentControls from "../components/ContentControls";
import ClientFacade from "../api/ClientFacade";
import {Target} from "../api/catalog-service-client";
import TargetForm from "../components/TargetForm";
import {LoadingLabel} from "../elements/LoadingLabel";
import {useNavigate} from "react-router-dom";

const TargetsPage = () => {
  const [targets, setTargets] = useState<Target[]>([])
  const [selectedTargets, setSelectedTargets] = useState<Target[]>([])

  const [isLoading, setIsLoading] = useState<boolean>(false)
  const [isDisabledControls, setIsDisabledControls] = useState<boolean>(true)
  const [isAddTargetFormActive, setIsAddTargetFormActive] = useState<boolean>(false)
  const [reloadTargetsFlag, setReloadTargetsFlag] = useState<boolean>(false)
  const navigate = useNavigate()

  useEffect(() => {
    setIsLoading(true)
    ClientFacade.catalogServiceClient.target.getTargetsByUser()
      .then((response) => {
        setTargets(response.targets)
        setIsLoading(false)
        setReloadTargetsFlag(false)
      })
      .catch((error) => {
        setReloadTargetsFlag(false)
        console.log(error.message)
      })
  }, [reloadTargetsFlag]);

  useEffect(() => {
    setIsDisabledControls(selectedTargets.length === 0)
  }, [selectedTargets]);
  const pageDefinition = () => {
    return (
      <div>
        <span className="icon is-big is-left">
            <i className="fa fa-bullseye" aria-hidden="true"></i>
        </span>
        <label className="ml-2">Цели</label>
      </div>
    )
  }

  const controlButtons =
    [
      <button
        className="button is-rounded"
        disabled={isDisabledControls}
        onClick={() =>
          ClientFacade.catalogServiceClient.target.deleteTargets(
            selectedTargets.map((target) => target.id)
          ).then((response) => {
            targets.filter((target) => selectedTargets.includes(target))
            setSelectedTargets([])
            setReloadTargetsFlag(true)
          }).catch((error) => {
            console.log(error.message)
          })
        }
      >
        <span className="icon is-left">
          <i className="fa fa-trash" aria-hidden="true"></i>
        </span>
        <span>Удалить</span>
      </button>
      ,
      <button
        className="button is-rounded"
        onClick={() => setIsAddTargetFormActive(true)}
      >
        <span className="icon is-left">
          <i className="fa fa-plus" aria-hidden="true"></i>
        </span>
        <span>Добавить</span>
      </button>,
      <button
        className="button is-rounded"
        disabled={isDisabledControls}
        onClick={() => navigate("/scans/start")}
      >
        <span className="icon is-left">
          <i className="fa fa-flag" aria-hidden="true"></i>
        </span>
        <span>
          {/*<a*/}
          {/*  href={process.env.PUBLIC_URL + }*/}
          {/*  style={}*/}
          {/*>*/}
          Просканировать
          {/*</a>*/}
        </span>
      </button>,
    ]


  const Targets = () => {
    return targets.length === 0
        ? (<div className="box has-text-centered">
            Пока не было добавлено целей :(
          </div>
        )
        : (
          <div className="scrollable-container">
            <table className="table is-hoverable is-fullwidth">
              <thead>
              <tr>
                <th></th>
                <th>Название</th>
                <th>Описание</th>
                <th>Ссылка</th>
              </tr>
              </thead>
              <tbody>
              {targets.map((target) => (
                <tr>
                  <td>
                    <input className="checkbox" type="checkbox" onChange={(event) => {
                      if (event.target.checked) {
                        setSelectedTargets([...selectedTargets, {
                          id: 1,
                          user_id: 1,
                          name: "dvwa",
                          url: "",
                          description: null
                        }])
                      } else {
                        setSelectedTargets(selectedTargets.filter(selectedTarget => selectedTarget.id !== 1))
                      }
                    }}/>
                  </td>
                  <td>dvwa</td>
                  <td>Damn Vulnerable Web Application (DVWA)</td>
                  <td>http://localhost:6667</td>
                  <td></td>
                </tr>
              ))}
              </tbody>
            </table>
          </div>
        )
  }
  return (
    <React.Fragment>
      <div className="box m-5">
        <ContentControls pageDefinitionElement={pageDefinition()} controlButtons={controlButtons}/>
        {TargetForm({
          isActive: isAddTargetFormActive,
          setIsActive: setIsAddTargetFormActive,
          setReloadTargetsFlag: setReloadTargetsFlag
        })}
      </div>
      <div className="m-5">
        {/*{isLoading*/}
        {/*  ? (*/}
        {/*    <div className="box">*/}
        {/*      {LoadingLabel}*/}
        {/*    </div>*/}
        {/*  )*/}
        {/*  : */}
        {Targets()
        }
      </div>
    </React.Fragment>
  );
};

export default TargetsPage;
