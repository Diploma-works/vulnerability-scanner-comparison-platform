import asyncio
import os

from loguru import logger

from common.clients import CatalogServiceClient
from common.models.errors import AnalyzeException
from common.rabbitmq.RabbitMQClient import RabbitMQClient, get_rabbit_url
from common.services.AnalyzeService import AnalyzeService
from watcher.PostgresDB import PostgresDB, get_postgres_url
from watcher.rabbit_message_handler import RabbitMessageHandler

postgres = PostgresDB()
rabbitmq = RabbitMQClient()
analyze_service = AnalyzeService()


async def main() -> None:
    await asyncio.gather(postgres.connect(get_postgres_url()), rabbitmq.connect(get_rabbit_url()))
    analyze_service.scan_repo = postgres.scan
    analyze_service.vulner_repo = postgres.vulnerability
    analyze_service.catalog_service_client = CatalogServiceClient(os.environ.get("CATALOG_SERVICE_URL", "http://localhost:8081/api"))
    message_handler = RabbitMessageHandler(analyze_service)
    try:
        while True:
            try:
                consumer_task = asyncio.create_task(rabbitmq.consume(message_handler.process_message))
                await consumer_task
            except AnalyzeException as ex:
                logger.error(f"Analyzing scan failed: {ex}")
            await asyncio.sleep(1)
    except Exception as e:
        logger.error(str(e))
        raise
    finally:
        await postgres.disconnect()
        await rabbitmq.disconnect()
        await analyze_service.catalog_service_client.close()


if __name__ == "__main__":
    asyncio.run(main())
