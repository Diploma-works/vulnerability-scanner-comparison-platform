from aioscrapy.http import HtmlResponse

from common.models.vulnerability import ParsedVulnerability
from common.parsers.BaseParser import BaseParser, ParserType
from common.utils.Request import Request


class Zap(BaseParser):
    parser_type = ParserType.JSON

    async def parse(self, response: HtmlResponse):
        report_data = self.extract_data_from_response(response)
        if not report_data:
            return
        for site in report_data.get('site', []):
            for alert in site.get('alerts', []):
                report_vulnerability_name = alert['name']
                vuln_group_id, severity_id = await self.get_vuln_group_id_and_severity_id(
                    report_vulnerability_name)

                for index, instance in enumerate(alert.get('instances', [])):
                    extra_info = instance.copy()
                    for key, value in instance.items():
                        if not value:
                            del extra_info[key]
                    request = Request(url=instance['uri'], method=instance['method'])
                    param = instance.get('param')
                    vector = instance.get('attack')
                    if all((param, vector)):
                        vector = f"{param}={vector}"
                    else:
                        vector = request.query
                    vulnerability = ParsedVulnerability(
                        scan_id=self.scan_id,
                        vuln_group_id=vuln_group_id,
                        severity_id=severity_id,
                        name=report_vulnerability_name,
                        vector=vector,
                        request=request.as_dict(),
                        is_false_positive=False,
                        is_duplicate=index != 0
                    )
                    self.parsed_vulnerabilities.append(vulnerability)
