from datetime import datetime
from typing import List, Optional
from pypika.queries import Table, Query, QueryBuilder
from app.db import BaseRepository
from app.models.scan import Scan
from common.models.common import Id

scan = Table('scan')


class ScanRepository(BaseRepository):

    async def get_scans(
            self,
            targets_ids: List[int],
    ) -> List[Scan]:
        q: QueryBuilder = Query().from_(scan).select('*').where(scan.target_id.isin(targets_ids))
        return await self.fetch_rows(q, serializer=Scan)

    async def set_scan_status(self, scan_id: int, status_id: int) -> None:
        q: QueryBuilder = scan.update().set(scan.status_id, status_id).where(scan.id == scan_id)
        await self.execute(q)

    async def set_scan_finish_time(self, scan_id: int, finished_at: Optional[datetime]) -> None:
        q: QueryBuilder = scan.update().set(scan.finished_at, finished_at).where(scan.id == scan_id)
        await self.execute(q)

    async def get_scan_by_param(self, scan_id: int) -> Scan:
        q: QueryBuilder = Query().from_(scan).select('*').where(scan.id == scan_id)
        return await self.fetch_one(q, serializer=Scan)

    async def get_scans_ids_by_scanner_version(self, scanner_id: int) -> List[Id]:
        q: QueryBuilder = Query().from_(scan).select('id').where(scan.scanner_id == scanner_id)
        return await self.fetch_rows(q, Id)
