from typing import List, Optional

from pypika import Table
from pypika.queries import QueryBuilder, Query

from common.db.BaseRepository import BaseRepository
from common.models.common import Id
from common.models.vulnerability import Vulnerability, VulnerabilityDuplicates

vulnerability = Table('vulnerability')
vulnerabilities_duplicates = Table('vulnerabilities_duplicates')


class VulnerabilityRepository(BaseRepository):

    async def get_vulnerabilities(self) -> List[Vulnerability]:
        q: QueryBuilder = Query().from_(vulnerability).select('*')
        return await self.fetch_rows(q, serializer=Vulnerability)

    async def insert_vulnerability(
            self,
            scan_id: int,
            group_id: int,
            severity_id: int,
            name: str,
            method: Optional[str],
            vector: Optional[str],
            url: Optional[str],
            path: Optional[str],
            params: Optional[str],
            is_false_positive: bool
    ) -> int:
        q: QueryBuilder = Query().into(vulnerability).columns(
            'scan_id', 'group_id', 'severity_id', 'name',
            'method', 'vector', 'url', 'path', 'params', 'is_false_positive'
        ).insert(
            scan_id, group_id, severity_id, name, method, vector,
            url, path, params, is_false_positive
        )
        q: str = f"{q} RETURNING id"
        vulnerability_id = await self.fetch_one(q, serializer=Id)
        return vulnerability_id.id

    async def insert_vulnerability_duplicates(
            self,
            vulnerability_id: int,
            duplicates_ids: List[int]
    ) -> None:
        q: QueryBuilder = Query().into(vulnerabilities_duplicates).columns(
            'vulner_id', 'duplicates_ids'
        ).insert(
            vulnerability_id, ','.join([str(d) for d in duplicates_ids])
        )
        await self.execute(q)

    async def delete_vulnerabilities_duplicates_by_ids(self, vulner_ids: List[int]) -> None:
        q: QueryBuilder = Query().from_(vulnerabilities_duplicates).delete().where(
            vulnerabilities_duplicates.vulner_id.isin(vulner_ids)
        )
        await self.execute(q)

    async def delete_vulnerabilities_duplicates_by_scan_id(self, scan_id: int) -> None:
        q: QueryBuilder = Query().from_(vulnerability).delete().where(
            vulnerability.scan_id == scan_id
        )
        await self.execute(q)

    async def get_vulnerabilities_with_duplicates_by_scan_id(self, scan_id: int) -> List[VulnerabilityDuplicates]:
        q: QueryBuilder = Query().from_(vulnerability).join(vulnerabilities_duplicates).on(
            vulnerabilities_duplicates.vulner_id == vulnerability.id
        ).select(vulnerabilities_duplicates.vulner_id, vulnerabilities_duplicates.duplicates_ids).where(
            vulnerability.scan_id == scan_id)
        return await self.fetch_rows(q, serializer=VulnerabilityDuplicates)
