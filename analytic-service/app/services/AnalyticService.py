from app.db.repositories.AnalyticRepository import AnalyticRepository
from app.models.analytic import StatisticList, Statistic
from common.clients import CatalogServiceClient
from common.db.ScanRepository import ScanRepository


class AnalyticService:

    def __init__(
            self,
            scan_repo: ScanRepository,
            analytic_repo: AnalyticRepository,
            catalog_service_client: CatalogServiceClient
    ):
        self.scan_repo = scan_repo
        self.analytic_repo = analytic_repo,
        self.catalog_service_client = catalog_service_client

    async def get_statistics(self) -> StatisticList:
        result = []
        scanners = (await self.catalog_service_client.get_scanners()).scanners
        for scanner in scanners:
            scans_ids = await self.scan_repo.get_scans_ids_by_scanner_version(scanner.id)
            scanner_stat = Statistic(
                scanner_version_name=f"{scanner.name} {scanner.version}",
                info_count=0,
                low_count=0,
                medium_count=0,
                high_count=0,
                critical_count=0,

                info_points=0,
                low_points=0,
                medium_points=0,
                high_points=0,
                critical_points=0,

                total_points=0,

                false_positive_count=0,
                true_positive_count=0,
            )
            for scan_id in scans_ids:
                stat = await self.analytic_repo.get_scan_statistics_by_scan_id(scan_id)
                scanner_stat.info_count += stat.info_count
                scanner_stat.low_count += stat.low_count
                scanner_stat.medium_count += stat.medium_count
                scanner_stat.high_count += stat.high_count
                scanner_stat.critical_count += stat.critical_count
                scanner_stat.info_points += stat.info_points
                scanner_stat.low_points += stat.low_points
                scanner_stat.medium_points += stat.medium_points
                scanner_stat.high_points += stat.high_points
                scanner_stat.critical_points += stat.critical_points
                scanner_stat.total_points += stat.total_points
                scanner_stat.false_positive_count += stat.false_positive_count
                scanner_stat.true_positive_count += stat.true_positive_count
            result.append(scanner_stat)
        return StatisticList(stats=result)
