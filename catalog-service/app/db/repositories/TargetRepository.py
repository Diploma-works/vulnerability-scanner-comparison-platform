from typing import List, Optional, Union

from pypika.queries import QueryBuilder, Table, Query

from app.db import BaseRepository
from app.models.common import Id
from app.models.target import Target

target = Table('target')


class TargetRepository(BaseRepository):

    async def get_targets(self) -> List[Target]:
        q: QueryBuilder = Query().from_(target).select('*')
        return await self.fetch_rows(q, serializer=Target)

    async def get_target_by_id(self, target_id: int) -> Target:
        q: QueryBuilder = Query().from_(target).select('*').where(target.id == target_id)
        return await self.fetch_one(q, serializer=Target)

    async def insert_target(self, user_id: int, name: str, url: str, description: Optional[str]) -> int:
        q: QueryBuilder = (Query().into(target).columns('user_id', 'name', 'url', 'description')
                           .insert(user_id, name, url, description))
        q: str = f"{q} RETURNING id"
        target_id = await self.fetch_one(q, serializer=Id)
        return target_id.id

    async def update_target(self, target_id: int, name: str, url: str, description: Optional[str]) -> None:
        q: QueryBuilder = (
            target.update().
            set(target.name, name).
            set(target.url, url).
            set(target.description, description).
            where(target.id == target_id)
        )
        await self.execute(q)

    async def delete_targets(self, targets_ids: Union[List[int], int]) -> None:
        q: QueryBuilder = Query().from_(target).delete()
        if isinstance(targets_ids, list):
            q = q.where(target.id.isin(targets_ids))
        else:
            q = q.where(target.id == targets_ids)
        await self.execute(q)
