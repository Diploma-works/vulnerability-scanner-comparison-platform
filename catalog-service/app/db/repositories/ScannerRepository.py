from typing import List, Optional, Union

from pypika import Table, Query, Criterion
from pypika.queries import QueryBuilder

from app.db import BaseRepository
from app.models.common import Id
from app.models.scanner import ReportOption, Volume, ScannerDB, VolumeDB

scanner = Table("scanner")
report_options = Table("report_options")
volumes = Table("volumes")


class ScannerRepository(BaseRepository):

    async def get_scanners(self) -> List[ScannerDB]:
        q: QueryBuilder = Query().from_(scanner).select('*')
        return await self.fetch_rows(q, serializer=ScannerDB)

    async def get_scanner_by_id(self, scanner_id: int) -> ScannerDB:
        q: QueryBuilder = Query().from_(scanner).select('*').where(scanner.id == scanner_id)
        return await self.fetch_one(q, serializer=ScannerDB)

    async def get_scanner_by_name_and_version(self, name: str, version: str) -> ScannerDB:
        q: QueryBuilder = Query().from_(scanner).select('*').where(
            Criterion.all([
                scanner.name == name,
                scanner.version == version
            ])
        )
        return await self.fetch_one(q, serializer=ScannerDB)

    async def insert_scanner(
            self, name: str, version: str, description: Optional[str], image_path: Optional[str],
            docker_image_name: str, base_command: str, volumes_ids: str, env_variables: Optional[str],
            exit_code: int
    ) -> int:
        q: QueryBuilder = Query().into(scanner).columns("name", "version", "description", "image_path",
                                                        "docker_image_name",
                                                        "base_command", "volumes_ids",
                                                        "env_variables", "exit_code").insert(
            name, version, description, image_path, docker_image_name, base_command, volumes_ids, env_variables,
            exit_code
        )
        q: str = f"{q} RETURNING id"
        scanner_id = await self.fetch_one(q, serializer=Id)
        return scanner_id.id

    async def update_scanner(
            self, scanner_id: int, name: str, version: str, description: Optional[str],
            image_path: Optional[str], docker_image_name: str, base_command: str,
            volumes_ids: Optional[str], env_variables: Optional[str], exit_code: int
    ) -> None:
        q: QueryBuilder = (
            scanner.update().
            set(scanner.name, name).
            set(scanner.version, version).
            set(scanner.description, description).
            set(scanner.image_path, image_path).
            set(scanner.docker_image_name, docker_image_name).
            set(scanner.base_command, base_command).
            set(scanner.volumes_ids, volumes_ids).
            set(scanner.env_variables, env_variables).
            set(scanner.exit_code, exit_code).
            where(scanner.id == scanner_id)
        )
        await self.execute(q)

    async def get_report_option(
            self,
            scanner_id: int,
            report_type: str
    ) -> ReportOption:
        q: QueryBuilder = Query().from_(report_options).select('*').where(report_options.scanner_id == scanner_id)
        q = q.where(report_options.report_type == report_type)
        return await self.fetch_one(q, serializer=ReportOption)

    async def get_report_options_by_scanner_id(
            self,
            scanner_id: int
    ) -> List[ReportOption]:
        q: QueryBuilder = Query().from_(report_options).select('*').where(report_options.scanner_id == scanner_id)
        return await self.fetch_rows(q, serializer=ReportOption)

    async def insert_report_option(self, scanner_id: int, report_type: str, report_option: str) -> None:
        q: QueryBuilder = Query().into(report_options).columns(
            "scanner_id", "report_type", "report_option"
        ).insert(scanner_id, report_type, report_option)
        await self.execute(q)

    async def update_scanner_report_options(self, scanner_id: int, report_type: str, report_option: str) -> None:
        q: QueryBuilder = (
            report_options.update().
            set(report_options.report_option, report_option).
            where(report_options.scanner_id == scanner_id & report_options.report_type == report_type)
        )
        await self.execute(q)

    async def insert_volume(self, user_path: str, docker_path: str, mode: Optional[str]) -> int:
        q: QueryBuilder = Query().into(volumes).columns("user_path", "docker_path", "mode").insert(
            user_path, docker_path, mode
        )
        q: str = f"{q} RETURNING id"
        volume_id = await self.fetch_one(q, serializer=Id)
        return volume_id.id

    async def get_volumes_by_id(self, volumes_ids: List[int]) -> Union[VolumeDB, List[VolumeDB]]:
        q: QueryBuilder = Query().from_(volumes).select('*').where(volumes.id.isin(volumes_ids))
        return await self.fetch_rows(q, serializer=VolumeDB)

    async def update_volumes_by_id(self, volume_id: int, user_path: str, docker_path: str, mode: Optional[str]) -> None:
        q: QueryBuilder = (
            volumes.update().
            set(volumes.user_path, user_path).
            set(volumes.docker_path, docker_path).
            set(volumes.mode, mode).
            where(volumes.id == volume_id)
        )
        await self.execute(q)
