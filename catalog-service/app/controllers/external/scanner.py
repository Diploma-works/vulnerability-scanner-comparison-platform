from typing import Union, Optional

from fastapi import APIRouter, Depends, Query
from starlette import status

from app.models.common import Id
from app.models.scanner import ScannerList, Scanner, UpsertScannerRequest, ReportOption, ReportOptionList
from app.services import ScannerService, get_scanner_service

router = APIRouter(prefix="/scanner", tags=["external", "scanner"])


@router.get(
    path="/list",
    description="Получение списка сканеров",
    response_model=ScannerList
)
async def get_scanners(
        scanner_service: ScannerService = Depends(get_scanner_service)
):
    return await scanner_service.get_scanners()


@router.get(
    path="/{scanner_id}",
    description="Метод получения сканера по id",
    response_model=Scanner
)
async def get_scanner_by_id(
        scanner_id: int,
        scanner_service: ScannerService = Depends(get_scanner_service)
):
    return await scanner_service.get_scanner_by_id(scanner_id)


@router.post(
    path="/",
    description="Метод добавления сканера",
    response_model=Id,
    status_code=status.HTTP_201_CREATED
)
async def create_scanner(
        body: UpsertScannerRequest,
        scanner_service: ScannerService = Depends(get_scanner_service)
):
    return await scanner_service.create_scanner(
        body.name, body.version, body.description, body.image_path, body.docker_image_name, body.base_command,
        body.volumes, body.env_variables, body.report_options, body.exit_code
    )


@router.put(
    path="/{scanner_id}",
    description="Метод обновления информации о сканере",
    status_code=status.HTTP_200_OK
)
async def update_scanner(
        scanner_id: int,
        body: UpsertScannerRequest,
        scanner_service: ScannerService = Depends(get_scanner_service)
):
    await scanner_service.update_scanner(scanner_id, body.name, body.version, body.description,
                                         body.image_path, body.docker_image_name, body.base_command,
                                         body.volumes, body.env_variables, body.report_options, body.exit_code)


@router.get(
    path="/{scanner_id}/report_option",
    description="Получение списка опций запуска сканера для генерации отчета",
    response_model=ReportOptionList
)
async def get_scanner_report_options(
        scanner_id: int,
        scanner_service: ScannerService = Depends(get_scanner_service)
):
    result = await scanner_service.get_report_options(scanner_id)
    return result
