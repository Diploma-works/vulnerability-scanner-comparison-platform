from typing import Optional, Union, Dict, List

from fastapi import HTTPException
from starlette import status

from app.db.repositories.ScannerRepository import ScannerRepository
from app.models.common import Id
from app.models.errors import SCANNER_NOT_FOUND, SCANNER_VERSION_ALREADY_EXISTS, REPORT_TYPE_NOT_SUPPORTED
from app.models.scanner import ScannerList, Scanner, ReportOption, ReportOptionList, Volume, ScannerDB
from app.utils.ReportType import ReportType


class ScannerService:
    def __init__(
            self,
            scanner_repo: ScannerRepository
    ):
        self.__scanner_repo = scanner_repo

    async def __convert_scanner_to_full_view(self, scanner: ScannerDB) -> Scanner:
        volumes = await self.__scanner_repo.get_volumes_by_id(scanner.volumes_ids_as_array)

        return Scanner(id=scanner.id, name=scanner.name, version=scanner.version, description=scanner.description,
                       image_path=scanner.image_path, docker_image_name=scanner.docker_image_name,
                       base_command=scanner.base_command, volumes=volumes, env_variables=scanner.env_variables,
                       exit_code=scanner.exit_code
                       )

    async def get_scanners(self) -> ScannerList:
        scanners = await self.__scanner_repo.get_scanners()
        scanners = [await self.__convert_scanner_to_full_view(sc) for sc in scanners]
        return ScannerList(scanners=scanners)

    async def get_scanner_by_id(self, scanner_id: int) -> Scanner:
        scanner = await self.__scanner_repo.get_scanner_by_id(scanner_id)
        if not scanner:
            raise HTTPException(status_code=404, detail=SCANNER_NOT_FOUND)
        return await self.__convert_scanner_to_full_view(scanner)

    async def create_scanner(
            self,
            name: str,
            version: str,
            description: str,
            image_path: str,
            docker_image_name: str,
            base_command: str,
            volumes: Union[Volume, List[Volume]],
            env_variables: Optional[str],
            report_options: Dict[str, str],
            exit_code: int
    ) -> Id:
        scanner = await self.__scanner_repo.get_scanner_by_name_and_version(name, version)
        if scanner:
            raise HTTPException(status_code=status.HTTP_409_CONFLICT, detail=SCANNER_VERSION_ALREADY_EXISTS)
        if isinstance(volumes, list):
            volumes_ids = [await self.__scanner_repo.insert_volume(v.user_path, v.docker_path, v.mode) for v in volumes]
        else:
            volumes_ids = await self.__scanner_repo.insert_volume(volumes.user_path, volumes.docker_path, volumes.mode)
        scanner_id = await self.__scanner_repo.insert_scanner(
            name, version, description, image_path, docker_image_name, base_command,
            ','.join(map(str, volumes_ids)) if isinstance(volumes_ids, list) else str(volumes_ids),
            env_variables, exit_code
        )

        for key, value in report_options.items():
            await self.__scanner_repo.insert_report_option(scanner_id, key, value)
        return Id(id=scanner_id)

    async def update_scanner(  # TODO Сделать обновление volumes при обновлении информации о сканере
            self,
            scanner_id: int,
            name: str,
            version: str,
            description: str,
            image_path: str,
            docker_image_name: str,
            base_command: str,
            volumes: Union[Volume, List[Volume]],
            env_variables: Optional[str],
            report_options: Dict[str, str],
            exit_code: int
    ) -> None:
        scanner = await self.__scanner_repo.get_scanner_by_id(scanner_id)
        if not scanner:
            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=SCANNER_NOT_FOUND)

        await self.__scanner_repo.update_scanner(scanner.id, name, version, description, image_path, docker_image_name,
                                                 base_command, volumes, env_variables, exit_code)
        for key, value in report_options.items():
            await self.__scanner_repo.update_scanner_report_options(scanner_id, key, value)

    async def get_report_options(
            self,
            scanner_id: int,
            report_type: Optional[str] = None
    ) -> Union[ReportOption, ReportOptionList]:
        if not (await self.__scanner_repo.get_scanner_by_id(scanner_id)):
            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=SCANNER_NOT_FOUND)

        if report_type is not None:
            if ReportType.is_report_type(report_type):
                option = await self.__scanner_repo.get_report_option(scanner_id, report_type)
                return option
            else:
                raise HTTPException(status_code=status.HTTP_409_CONFLICT, detail=REPORT_TYPE_NOT_SUPPORTED)
        return ReportOptionList(options=await self.__scanner_repo.get_report_options_by_scanner_id(scanner_id))

    # TODO СДелать обновление report options
