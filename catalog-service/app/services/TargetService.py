from typing import Optional

from fastapi import HTTPException
from starlette import status

from app.db.repositories.TargetRepository import TargetRepository
from app.models.common import Id
from app.models.errors import TARGET_NOT_FOUND
from app.models.target import Target, TargetList


class TargetService:
    def __init__(
            self,
            target_repo: TargetRepository,
    ):
        self.target_repo = target_repo

    async def get_targets(self) -> TargetList:
        return TargetList(targets=await self.target_repo.get_targets())

    async def get_target_by_id(self, target_id: int) -> Target:
        target = await self.target_repo.get_target_by_id(target_id)
        if not target:
            raise HTTPException(status_code=404, detail=TARGET_NOT_FOUND)
        return target

    async def create_target(self, name: str, url: str, description: Optional[str]) -> Id:
        target_id = await self.target_repo.insert_target(name, url, description)
        return Id(id=target_id)
        pass

    async def update_target(self, target_id: int, name: str, url: str, description: Optional[str]) -> None:
        target = await self.target_repo.get_target_by_id(target_id)
        if not target:
            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=TARGET_NOT_FOUND)
        await self.target_repo.update_target(target_id, name, url, description)

    async def delete_target_by_id(self, target_id: int) -> None:
        target = await self.target_repo.get_target_by_id(target_id)
        if not target:
            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=TARGET_NOT_FOUND)
        await self.target_repo.delete_targets(target_id)
