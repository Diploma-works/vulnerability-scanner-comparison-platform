import uvicorn
from fastapi import FastAPI
from fastapi import HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.routing import APIRoute
from asyncpg import PostgresError

from app.config import Config
from app.controllers.external.main import router as external_router
from app.controllers.internal.main import router as internal_router
from app.events import create_start_app_db_event, create_stop_app_db_event
from app.models.errors.db_error_handler import db_error_handler
from app.models.errors.http_error_handler import http_error_handler

config = Config()


def create_application() -> FastAPI:
    app = FastAPI(**config.app)
    app.add_middleware(
        CORSMiddleware,
        allow_origins=config.app.allowed_hosts,
        allow_credentials=True,
        allow_methods=["GET", "POST", "PUT", "DELETE"],
        allow_headers=["*"],
    )

    app.add_event_handler("startup", create_start_app_db_event(app, config))
    app.add_event_handler("shutdown", create_stop_app_db_event(app))

    app.add_exception_handler(HTTPException, http_error_handler)
    app.add_exception_handler(PostgresError, db_error_handler)

    app.include_router(external_router, prefix=config.app.external_api_prefix, tags=["external"])
    app.include_router(internal_router, prefix=config.app.internal_api_prefix, tags=["internal"])
    for route in app.routes:
        if isinstance(route, APIRoute):
            route.operation_id = route.name
    return app


if __name__ == "__main__":
    uvicorn.run(create_application(), host=config.app.host, port=config.app.port, log_level="info")
